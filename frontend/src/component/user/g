const handleChange = (e) => {
    const { name, value, files } = e.target;
    setCvName((prev) => ({
      ...prev,
      [name]: name === 'cv' ? files[0] : value,
    }));
  };

<div className={style.cv}>
      <form onSubmit={handleSubmit} className={style.form}>
      <MDBCard style={{ maxWidth: '540px' }}>
      <MDBRow className='g-0'>
        <MDBCol md='4'>
        <div className={style.image}>
    
    <img src={cvName.img || ''} alt="Selected" />
        <label htmlFor="img" className={style.customFileInput}>
          {t('uploadImage')}
        </label>
        <input type="file" accept=".png, .jpg" name="img" id="img" hidden onChange={handleChange} />
      </div>       
       </MDBCol>
        <MDBCol md='8'>
          <MDBCardBody>
            <MDBCardTitle> 
              <input
            type='text'
            name='name'
            placeholder={t('placeholderName')}
            spellCheck='false'
            required
            value={cvName.name}
            onChange={handleChange}
          /></MDBCardTitle>
            <MDBCardText>
            <input type='file' name='cv'  accept='.pdf,.doc,.docx' onChange={handleChange} />
            </MDBCardText>
            <MDBCardText>
            <button type='submit'>{t("click")}</button>
            </MDBCardText>
          </MDBCardBody>
        </MDBCol>
      </MDBRow>
    </MDBCard>
      </form>
    </div>



    <div className={style.image}>
    {cvName.value && (
      // <img src={cvName.img} alt="Selected" />
      hello
    )}
    <label htmlFor="img" className={style.customFileInput}>
      {t('uploadImage')}
    </label>
    <input type="file" accept=".png, .jpg" name="img" id="img" hidden onChange={handleChange} />
  </div>






    <div className={style.cv}>
      <form onSubmit={handleSubmit} className={style.form}>
      <div className={style.image}>
    
      <img src={cvName.img || ''} alt="Selected" />
          <label htmlFor="img" className={style.customFileInput}>
            {t('uploadImage')}
          </label>
          <input type="file" accept=".png, .jpg" name="img" id="img" hidden onChange={handleChange} />
        </div>
        <div className={style.allinput}>
     <div className={style.text}>
          <input
            type='text'
            name='name'
            placeholder={t('placeholderName')}
            spellCheck='false'
            required
            value={cvName.name}
            onChange={handleChange}
          />
        </div>
        <input type='file' name='cv'  accept='.pdf,.doc,.docx' onChange={handleChange} />
        </div>
        <button type='submit'>{t("click")}</button>
      </form>
    </div>























    import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Cookies from 'js-cookie';
import axios from 'axios';
import { useTranslation } from 'react-i18next';
import { useDropzone } from 'react-dropzone';

import style from'./css/css.module.css';
const Cv = () => {
  const [cvName, setCvName] = useState({
    name: '',
    img:'',
    email:'',
    cv: null, 
  });
  const { t, i18n } = useTranslation();

  const navigate = useNavigate();
  useEffect(()=>{
    const login =Cookies.get("login");
    if(login !== "true"){
      navigate("/signin")
    }
  })
  
  const handleChange = (e) => {
    const { name, value, files } = e.target;
  
    if (name === 'img') {
      const file = files[0];
      const reader = new FileReader();
      reader.onload = () => {
        setUploadedImage(reader.result);
      };
      reader.readAsDataURL(file);
    }
  
    setCvName((prev) => ({
      ...prev,
      [name]: name === 'cv' ? files[0] : value,
    }));
  };
  
  
  

  const handleSubmit = async (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('name', cvName.name);
    formData.append('cv', cvName.cv);
    formData.append('email', Cookies.get('email'));
    formData.append('img', cvName.img); 


    try {
        const response = await axios.post('http://localhost:8081/employees', formData);
        if (response.status === 200) {
          alert('CV has been added successfully');
          setCvName({ name: '', img: '', cv: null });
        }
        
         else {
          alert('Failed to add CV. Please try again.');
        }
      } catch (error) {
        if (error.response && error.response.status === 400) {
          alert(error.response.data.message || 'User already exists.');
        } else {
          console.error('Error:', error);
          alert('Failed to add CV. Please try again.');
        }
      }
      
      
  };
  
  const [uploadedImage, setUploadedImage] = useState(null);

  const onDrop = (acceptedFiles) => {
    const file = acceptedFiles[0];
  
    const reader = new FileReader();
    reader.onload = () => {
      setUploadedImage(reader.result);
    };
  
    reader.readAsDataURL(file);
  };
  

  const { getRootProps, getInputProps } = useDropzone({ onDrop, accept: '.png, .jpg' });
  

  return (
    <div className={style.cv}>
      <form onSubmit={handleSubmit} className={style.form}>
      <div className={style.image} name="img">
      <div {...getRootProps()} style={dropzoneStyles}>
      <p>قم بسحب الصورة هنا أو انقر لاختيارها</p>
      {uploadedImage && (
        <div>
          <p>الصورة المحملة:</p>
          <img src={uploadedImage}  alt="Uploaded" style={{ maxWidth: '100%', maxHeight: '200px' }} onChange={handleChange}/>
        </div>
          )}
      </div>

        </div>
      
        <div className={style.allinput}>
     <div className={style.text}>
          <input
            type='text'
            name='name'
            placeholder={t('placeholderName')}
            spellCheck='false'
            required
            value={cvName.name}
            onChange={handleChange}
          />
        </div>
        <input type='file' name='cv'  accept='.pdf,.doc,.docx' onChange={handleChange} />
        </div>
        <button type='submit'>{t("click")}</button>
      </form>
    </div>
  );
};
const dropzoneStyles = {
  border: '2px dashed #cccccc',
  borderRadius: '4px',
  padding: '20px',
  textAlign: 'center',
  cursor: 'pointer',
};
export default Cv;
